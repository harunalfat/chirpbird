// Code generated by MockGen. DO NOT EDIT.
// Source: presentation/persistence/mongodb_message_repository.go

// Package mock_persistence is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/harunalfat/chirpbird/backend/entities"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// FetchFromChannel mocks base method.
func (m *MockMessageRepository) FetchFromChannel(ctx context.Context, channelID string) ([]entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromChannel", ctx, channelID)
	ret0, _ := ret[0].([]entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromChannel indicates an expected call of FetchFromChannel.
func (mr *MockMessageRepositoryMockRecorder) FetchFromChannel(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromChannel", reflect.TypeOf((*MockMessageRepository)(nil).FetchFromChannel), ctx, channelID)
}

// Insert mocks base method.
func (m *MockMessageRepository) Insert(arg0 context.Context, arg1 entities.Message) (entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMessageRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMessageRepository)(nil).Insert), arg0, arg1)
}
